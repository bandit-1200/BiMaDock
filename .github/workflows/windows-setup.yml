name: Windows Setup

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Install GitVersion
        run: dotnet tool install --global GitVersion.Tool

      - name: Generate and Display Version
        id: gitversion
        run: |
          dotnet-gitversion /output json /outputfile gitversion.json
          if (Test-Path "gitversion.json") {
            Get-Content gitversion.json
          } else {
            Write-Host "gitversion.json not found"
            exit 1
          }

      - name: Read and Display Version
        id: read_version
        shell: bash
        run: |
          if [ -f "gitversion.json" ]; then
            VERSION=$(jq -r .SemVer gitversion.json)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "Generated version: $VERSION"
          else
            echo "gitversion.json not found"
            exit 1
          fi

      - name: Build project
        run: dotnet build --configuration Release

      - name: Create Setup
        run: |
          dotnet publish -c Release -o ./publish
          Compress-Archive -Path ./publish/* -DestinationPath ./windows-setup.zip

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "Automated release of version ${{ env.VERSION }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Setup
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-setup.zip
          asset_name: windows-setup.zip
          asset_content_type: application/zip
