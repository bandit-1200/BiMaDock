name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # LÃ¤dt die gesamte Historie

    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --configuration Release

    - name: Publish project
      run: dotnet publish ./BiMaDock.csproj --configuration Release --output ./publish --runtime win-x64

    - name: Create Windows installer
      run: |
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "./BiMaDock.iss"

    - name: Determine tag
      id: determine_tag
      run: echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Create release
      id: create_release
      uses: actions/github-script@v6
      env:
        RELEASE_TAG: ${{ env.RELEASE_TAG }}
      with:
        github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        script: |
          try {
            const response = await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: process.env.RELEASE_TAG,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: process.env.RELEASE_TAG,
            });

            core.exportVariable('RELEASE_ID', response.data.id);
            core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
          } catch (error) {
            core.setFailed(error.message);
          }

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.RELEASE_UPLOAD_URL }}
        asset_path: ./publish/BiMaDockSetup.exe
        asset_name: BiMaDockSetup.exe
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Das korrekte Token verwenden

    - name: Save Release URL
      run: echo "RELEASE_URL=https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_OUTPUT
